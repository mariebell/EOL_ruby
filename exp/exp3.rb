# 【問題3】配列と繰り返しの理解チェック
# (1)変数arrに配列['りんご', 'みかん', 'ぶどう']を代入してください.
# arr[0]で'りんご',arr[1]で'みかん',arr[2]で'ぶどう'が出力されることを確認してください.
arr = ['りんご', 'みかん', 'ぶどう']
puts arr[0] #りんご
puts arr[1] #みかん
puts arr[2] #ぶどう
#puts arr[-1] とすると後ろから1番目という意味になるので、'ぶどう'が出力される

# (2)配列arrの最後に'いちご'を追加してください.
# arr[3]で'いちご'が追加されることを確認してください.
arr << 'いちご' # arr[3] = 'いちご' も可
puts arr[3]
#puts arr[-1] とすると後ろから1番目という意味になるので、'いちご'が出力される

# (3)配列arrの全ての要素について、繰り返し文を用いて"ご注文は＊＊＊ですか"と出力してください.
arr.each do |fruit|
  puts 'ご注文は' + fruit + 'ですか'
  # puts "ご注文は#{fruit}ですか" も可
end

# 【補足】
# ""で囲むと、文字列展開が可能です
# 文字列展開とは、#{変数名}と書くことで変数の値を入れ込むことができます
# ""の中では改行文字\nで改行されるのに対し、''の中ではそのまま文字として出力されます
# 
# puts "こんにちは\nこんばんは" # 改行される
# puts 'こんにちは\nこんばんは' # そのまま出力される

# (4)「1は奇数です」「2は偶数です」というふうに、
# 1から10までの数字が奇数か偶数かどうかを出力してください.
# ヒント: 数字の範囲は範囲オブジェクト(num1..num2)を用いることができます
# ヒント: 奇数であるかどうかを返すメソッド odd?
(1..10).each do |num|
  if num.odd?
    puts "#{num}は奇数です" # num.to_s + 'は奇数です' も可 ※下の補足を参照
  else
    puts "#{num}は偶数です" # num.to_s + 'は偶数です' も可 ※下の補足を参照
  end
end

# 【補足】
# num + "は奇数です" という書き方はできません。
# numは数値であり、文字列と+で結合することができないからです。
# こういった場合はnumに対してto_sメソッドで文字列に変換してから使用します。

# 別解
# (1..10).map do |num|
#   oddeven = num.odd? ? "奇数" : "偶数" #三項演算子
#   puts "#{num}は#{oddeven}です"
# end
# 
# mapメソッドはeachメソッドに似ていますが、
# ブロック(do..end)処理をした結果を配列にして返すメソッドです。
# 
# 三項演算子は条件によって出力を変えることを簡潔に書くことができます
# 条件文 ? 真の場合 : 偽の場合
# 例えば
# 
# if count > 100
#   puts '100より大きい'
# else
#   puts '100以下である'
# end
# 
# のような処理を 
# 
# count = 100
# puts count > 100 ? '100より大きい' : '100以下である'
# 
# と一行で書くことができます。